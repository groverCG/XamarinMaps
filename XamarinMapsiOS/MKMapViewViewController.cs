// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using Foundation;
using Google.Maps;
using MapKit;
using SharedCode.Services;
using SharedCode.ViewModels;
using UIKit;

namespace XamarinMapsiOS
{
	public partial class MKMapViewViewController : UIViewController, IMKMapViewDelegate
	{
        private MKMapView map;
        public PlacesViewModel viewModel = IocService.GetService<PlacesViewModel>();
        public MKMapViewViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            map = new MKMapView(mapContainerView.Bounds);
            map.MapType = MKMapType.Hybrid;
            mapContainerView.AddSubview(map);
            Setup();
        }

        public void Setup()
        {
            map.Delegate = this;
            viewModel.PropertyChanged += UpdateUI;
            placesTableView.RegisterNibForCellReuse(PlaceTableViewCell.Nib, PlaceTableViewCell.Key);
            placesTableView.DataSource = new MKMapViewViewControllerTableViewDataSource(this);
            placesTableView.Delegate = new MKMapViewViewControllerTableViewDelegate(this);
            viewModel.LoadPlacesCommand.Execute(null);
        }

        public void AddMarker(CoreLocation.CLLocationCoordinate2D position, string name)
        {
            var annotation = new MKPointAnnotation();
            annotation.Coordinate = position;
            annotation.Title = name;
            map.AddAnnotation(annotation);
        }

        public void SetPosition(CoreLocation.CLLocationCoordinate2D position)
        {
            var camera = new MKMapCamera();
            camera.CenterCoordinate = position;
            map.SetCamera(camera, true);
        }

        public void UpdateUI(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case nameof(viewModel.Places):
                    placesTableView.ReloadData();
                    var places = viewModel.Places;
                    foreach (var place in places)
                    {
                        var position = new CoreLocation.CLLocationCoordinate2D(place.geometry.location.lat, place.geometry.location.lng);
                        AddMarker(position, place.name);
                    }
                    var location = new CoreLocation.CLLocationCoordinate2D(places[0].geometry.location.lat, places[0].geometry.location.lng);
                    SetPosition(location);
                    break;
                case nameof(viewModel.CurrentPlace):
                    var loc = new CoreLocation.CLLocationCoordinate2D(viewModel.CurrentPlace.geometry.location.lat, viewModel.CurrentPlace.geometry.location.lng);
                    SetPosition(loc);
                    var indexPath = NSIndexPath.FromRowSection(viewModel.CurrentPlaceIndex, 0);
                    placesTableView.SelectRow(indexPath, true, UITableViewScrollPosition.Top);
                    break;
            }
        }

        [Export("mapView:didSelectAnnotation:")]
        public void DidSelectAnnotation(MKMapView mapView, IMKAnnotation annotation)
        {
            var item = viewModel.Places.FindIndex(i => i.name == annotation.GetTitle());
            viewModel.CurrentPlaceIndex = item;
            viewModel.CurrentPlace = viewModel.Places[item];
        }

        class MKMapViewViewControllerTableViewDataSource : UITableViewDataSource
        {
            private MKMapViewViewController viewController;

            public MKMapViewViewControllerTableViewDataSource(MKMapViewViewController viewController)
            {
                this.viewController = viewController;
            }

            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                var cell = tableView.DequeueReusableCell(PlaceTableViewCell.Key, indexPath) as PlaceTableViewCell;
                cell.UpdateCell(viewController.viewModel.Places[indexPath.Row]);
                return cell;
            }

            public override nint RowsInSection(UITableView tableView, nint section)
            {
                return viewController.viewModel.Places.Count;
            }
        }

        class MKMapViewViewControllerTableViewDelegate : UITableViewDelegate
        {
            private MKMapViewViewController viewController;

            public MKMapViewViewControllerTableViewDelegate(MKMapViewViewController viewController)
            {
                this.viewController = viewController;
            }

            public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
            {
                viewController.viewModel.CurrentPlaceIndex = indexPath.Row;
                viewController.viewModel.CurrentPlace = viewController.viewModel.Places[indexPath.Row];
            }
        }
    }
}
